<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.6.0/polyfill.js"></script>
<script src="https://cdn.jsdelivr.net/gh/deepak-gangwar/or-halevi@main/cdn/utils.js"></script>
<script src="https://cdn.jsdelivr.net/gh/studio-freight/lenis@latest/bundled/lenis.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@barba/core@2.9.7/dist/barba.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.0/ScrollTrigger.min.js"></script>
<script src="https://abc7913.sg-host.com/minified/SplitText.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/deepak-gangwar/or-halevi@main/cdn/cursor.js"></script>

<script>

// GSAP SCROLL TRIGGER AND SPLIT TEXT ANIMATIONS
// =============================================

const cleanGSAP = () => {
  ScrollTrigger.getAll().forEach(t => t.kill(false))
  ScrollTrigger.refresh()
  window.dispatchEvent(new Event("resize"))
};

var childSplit = []
var parentSplit = []

function gsapAnimations() {
  gsap.registerPlugin(SplitText, ScrollTrigger)

  gsap.utils.toArray("h1,h2,h3,h4,h5,p").forEach((title) => {
    if(!title.classList.contains('hero-split')) {
      childSplit = new SplitText(title, {
        type: "lines",
        linesClass: "split-child",
      })
      parentSplit = new SplitText(title, {
        linesClass: "split-parent",
      })

      gsap.from(childSplit.lines, {
        scrollTrigger: {
          trigger: title,
          start: "bottom bottom",
          end: "bottom bottom",
        },
        duration: 1.2,
        yPercent: 220,
        ease: "power4.out",
        skewY: 7,
        stagger: 0.1,
      }) 
	}
  });
 
  
  // IMAGES ENTRANCE EFFECT
  
  gsap.utils.toArray(".fade img, video").forEach((img) => {
    gsap.fromTo(
      img,
      {
        clipPath: "inset(7% 7% 7% 7%)", 
        yPercent: 10,
        opacity: 1,
      },
      {
        scrollTrigger: {
          trigger: img,
          start: "top 100%",
          end: "bottom 0%",
          toggleActions: "play none none none",
        },
        duration: 1.8,
        clipPath: "inset(0% 0% 0% 0%)", 
        yPercent: 0,
        ease: "power4.out",
        stagger: {
          amount: 2,
        },
      }
    );
  });
  

  /*
// PARALLAX EFFECT

gsap.registerPlugin(ScrollTrigger);

gsap.utils.toArray("[data-speed]").forEach(el => {
  gsap.to(el, {
    y: function() {return (1 - parseFloat(el.getAttribute("data-speed"))) * (ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))},
    ease: "none",
    scrollTrigger: {
      trigger: el,
      start: "top center",
      end: "max",
      invalidateOnRefresh: true,
      scrub: true
    }
  });
});
*/
  
  gsap.from(".partners-logo", {
    scrollTrigger: ".all-partners",
    start: "top top",
    end: "bottom bottom",
    duration: 1,
    yPercent: 30,
    opacity: 0,
    ease: "power4.out",
    stagger: {
      amount: 1,
    }
  });
  
  if(!isMobile()) {
    gsap
    .timeline({
      scrollTrigger: {
        trigger: ".slider",
        start: "top 80%",
        end: "99% bottom",
        scrub: 1
      }
    })
    .to(".slide", {
      xPercent: -52,
      YPercent: -30,
      ease: "none"
    });
  }
  
  // Stop safari ios resizes
  //ScrollTrigger.normalizeScroll(true)
  //ScrollTrigger.config({ ignoreMobileResize: true })
}

window.addEventListener('load', gsapAnimations)

 
// NEXT PROJECTS ON HOVER
// ======================

function nextProjectHoverAnim(namespace) {
  let barbaNs
  if (namespace !== 'home') barbaNs = namespace
  
  if(barbaNs === 'case') {
    const container = document.getElementById('next-projects')
    const image = document.getElementById('next-project-image')
    let isHovered = false

    container.addEventListener('mouseenter', () => {
      isHovered = true
      gsap.to(image, { opacity: 1, clipPath: "inset(0% 0% 0% 0%)", rotate:14, duration: 0.5, ease: "power4.easeInOut" })
    })

    container.addEventListener('mousemove', (event) => {
      if (isHovered) {
        const rect = container.getBoundingClientRect()
        const containerX = rect.left
        const containerY = rect.top
        const cursorX = event.clientX
        const cursorY = event.clientY
        const offsetX = cursorX - containerX
        const offsetY = cursorY - containerY
        const imageWidth = image.offsetWidth
        const imageHeight = image.offsetHeight
        const imageX = offsetX - imageWidth / 2
        const imageY = offsetY - imageHeight / 2

        gsap.to(image, { x: imageX, y: imageY, duration: 0.5, ease: "power4.easeInOut"})
        gsap.to(image, { rotation: (offsetX - containerX - container.offsetWidth / 2) / 20, duration: 0.3 })
      }
    })

    container.addEventListener('mouseleave', () => {
      isHovered = false
      gsap.to(image, { opacity: 0, clipPath: "inset(0% 100% 0% 0%)", rotate:0, duration: 0.5 })
    })
  }
}

//window.addEventListener('load', nextProjectHoverAnim)


function gsapHeroAnimations() {
  gsap.utils.toArray('.hero-split').forEach(heading => {
	const heroChildSplit = new SplitText(heading, {
      type: "lines",
      linesClass: "split-child",
    })
    const heroParentSplit = new SplitText(heading, {
      linesClass: "split-parent",
    })

    gsap.from(heroChildSplit.lines, {
      duration: 1.2,
      yPercent: 220,
      ease: "power4.out",
      skewY: 7,
      stagger: 0.1,
    })
  })
}

window.addEventListener('load', gsapHeroAnimations)

</script>

<script src="https://cdn.jsdelivr.net/gh/deepak-gangwar/or-halevi@main/cdn/smooth.js"></script>
<script src="https://cdn.jsdelivr.net/gh/deepak-gangwar/or-halevi@main/cdn/handleVideoPlayback.js"></script>

<script>

// PAGE TRANSITION LOGIC
// =====================

const heightVal = window.innerWidth < 650 ? "120vw" : "80vw"
const sizes = {
  // NOTE: You can define your custom block size here (can be pixel value eg. 360)
  block: {
    width: window.innerWidth > window.innerHeight ? window.innerHeight / 1.7 : window.innerWidth / 1.7,
    height: window.innerWidth > window.innerHeight ? window.innerHeight / 1.7 : window.innerWidth / 1.7
  },
  large: {
    width: "80vw",
    height: heightVal
  }
}

let currentHomeScrollPos = window.scrollY || window.pageYOffset
let currentItemClasses = undefined

// to store the current position wrt gallery 
const item = {
  el: null,
  bounds: 0,
  posX: 0,
  posY: 0,
  width: 0,
  height: 0,
}

// update the current item
function updateCurrentItem(e) {
  const target = e.target.parentElement
  // this gives the image wrapper which is clicked for page transition
  item.el = target
  item.bounds = item.el.getBoundingClientRect()
  item.posX = item.bounds.x
  item.posY = item.bounds.y + window.scrollY
  item.top = item.bounds.top
  item.width = item.bounds.width
  item.height = item.bounds.height
  currentHomeScrollPos = window.scrollY || window.pageYOffset
  currentItemClasses = item.el.classList
}


function addEvents() {
  // gallery images for seamless page transitions
  const items = document.querySelectorAll('.js-pt')
  items.forEach(item => {
    item.addEventListener('click', (e) => updateCurrentItem(e))
  })
  
  // nav arrows or the bottom next project
  const navItems = document.querySelectorAll('js-pt-nav')
  navItems.forEach(navItem => {
    navItem.addEventListener('click', (e) => { e.preventDefault(), console.log('nav item is clicked') })
  })
}
addEvents()
  
// to combine these two functions pass in data.next from the caller and use if 
/*
  let doNextFade = false
function addNavEvents() {
  const items = document.querySelectorAll('.js-pt-nav')
  items.forEach(item => {
    item.addEventListener('click', (e) => { doNextFade = true })
  })
}
addNavEvents()
*/

// DEFINE ANIMATIONS FOR INDIVIDUAL PAGES
// ======================================

function pageHomeEntry(tl) {
  const images = document.querySelectorAll('.img__wrapper')
  images.forEach(image => {
    if (image.classList.toString() === currentItemClasses.toString()) tl.set(image, { zIndex: 10, duration: 0 }, 0)
    //if (image.classList.toString() !== currentItemClasses.toString()) tl.from(image, { opacity: 0, duration: 0.8 }, 0)
  })
  tl.add(() => document.querySelector('.overlay').remove())
  
  const gallery = document.querySelector('.gallery')
  const galleryOverlay = document.createElement('div')
  galleryOverlay.classList.add('gallery-overlay')
  gallery.insertAdjacentElement("beforebegin", galleryOverlay)
  tl.to(galleryOverlay, { opacity: 0, duration: 1.2 }, 0.2)
  tl.to(galleryOverlay, { height: 0, duration: 0 }, 1.4)
  
  
  tl.from('.home__title', { opacity: 0, duration: 1 }, 0)
  tl.to(item.el, { pointerEvents: 'all', duration: 0 }, 0)
  
  if (!isMobile()) {
    cursor?.reassignTriggers()
  	cursor?.addEventListeners()
  }
  
  
  // fade-in image subtitles on mobile
  if(isMobile()) {
    const titles = document.querySelectorAll('.subtitle__wrapper')
    titles.forEach(title => {
      gsap.from(title, { opacity: 0, duration: 0.8 })
    })
    
    const slides = document.querySelectorAll('.img__wrapper')
    slides.forEach(slide => {
      if (slide.classList.toString() === currentItemClasses.toString()) gsap.set(slide, { zIndex: 10, duration: 0 })
      if (slide.classList.toString() !== currentItemClasses.toString()) gsap.from(slide, { opacity: 0, duration: 0.8 })
    })
  }
}

function pageProjectEntry(tl) {
  tl.from('.controls', { opacity: 0, yPercent: "110", duration: 2, delay: -1, ease: "expo.inOut" }, 0)
  tl.from('.project__word', { yPercent: "250", duration: 2, ease: "expo.inOut", onComplete: () => {lenis.start()}}, 0)
}


let returnToY = item.posY  // to restore the position (scroll restoration)

let startFromCasePage = false
let hasTransitionRunOnce = false
let doSeamless = false

const pageContainer = document.querySelector("#intro")
const isCasePage = pageContainer.classList.contains('is-page2')

function checkForCaseStart() {
  if (isCasePage && !hasTransitionRunOnce) startFromCasePage = true
}

window.addEventListener('load', checkForCaseStart)

// Main controller function
// ========================

function init() {

  function pageLeaveAnim() {
    hasTransitionRunOnce = true

    const imgWrapper = item.el
    const projectImgWrapper = document.querySelector('.project__img')
    const page = document.querySelector('#intro')
    let isHome = page.classList.contains('is-home') ? true : false

    const tl = gsap.timeline()
    const commonOpts = { duration: 1, ease: "expo.inOut" }

    if (isHome) {
      // Center of the viewport calculation
      const viewportWidth = window.innerWidth || document.documentElement.clientWidth
      const viewportHeight = window.innerHeight || document.documentElement.clientHeight
      const scrollX = window.scrollX || window.pageXOffset
      const scrollY = window.scrollY || window.pageYOffset
      const midX = scrollX + viewportWidth / 2 - sizes.block.width / 2 - item.posX
      const midY = - item.top + viewportHeight / 2 - sizes.block.height / 2
      currentHomeScrollPos = scrollY

      if(!isMobile()) lenis.stop()
      disableScroll()
      
      tl.to('.container', { opacity: 0, duration: 0.6, }, 0)
      tl.to(item.el, { pointerEvents: 'none', duration: 0 }, 0)

      const images = document.querySelectorAll('.img__wrapper')
      images.forEach(image => {
        if (image !== item.el) tl.to(image, { opacity: 0, duration: 0.8 }, 0)
      })

      // move image to the center, make it a block with some rotation
      tl.to(imgWrapper, {
        width: sizes.block.width,
        height: sizes.block.height,
        x: midX,
        y: midY,
        rotate: "15deg",
        ...commonOpts
      }, 0)

      // scale up the image to larger dimension and translate to final position
      const yVal = window.innerWidth < 650 ? viewportWidth * 0.55 - item.top : viewportWidth * 0.35 - item.top
      
      tl.to(imgWrapper, {
        width: sizes.large.width,
        height: sizes.large.height,
        x: viewportWidth * 0.1 - item.posX,
        y: yVal,
        rotate: "0",
        ...commonOpts
      }, commonOpts.duration)
      
      // fade-out image subtitles on mobile
      if(isMobile()) {
        const titles = document.querySelectorAll('.subtitle__wrapper')
        titles.forEach(title => {
          gsap.to(title, { opacity: 0, duration: 0.8 })
        })
      }

      returnToY = item.top

    } else {

      const viewportWidth = window.innerWidth || document.documentElement.clientWidth
      const viewportHeight = window.innerHeight || document.documentElement.clientHeight
      const scrollX = window.scrollX || window.pageXOffset
      const scrollY = window.scrollY || window.pageYOffset
      const destinationX = scrollX + viewportWidth / 2 - sizes.block.width / 2
      const destinationY = scrollY + viewportHeight / 2 - sizes.block.height / 2

      if(!isMobile()) lenis.stop()
      disableScroll()
      
      // overlay to blur other content of the page
      const overlay = document.createElement('div')
      const mainWrap = document.querySelector('.main-wrapper')
      overlay.classList.add('overlay')
      mainWrap.appendChild(overlay)
      
      tl.set(projectImgWrapper, { zIndex: "10", duration: 0 })
      tl.set(overlay, { height: "100%", duration: 0 })
      tl.from(overlay, { opacity: "0", duration: 0.6 }, 0)
      

      // shrink width to desired block
      tl.to(projectImgWrapper, { width: sizes.block.width, height: sizes.block.height, x: destinationX, y: destinationY, rotate: "15deg", ...commonOpts }, 0)

      // transform item to original position (scrolledAmt is needed only for lenis)
      tl.to(projectImgWrapper, { width: item.width, height: item.height, x: item.posX, y: (returnToY + getScrollAmt()), rotate: "0", ...commonOpts }, commonOpts.duration)

      // hide the controls and project title
      tl.to('.controls', { opacity: 0, yPercent: "100", ...commonOpts }, 0)
      tl.to('.project__word', { yPercent: "100", duration: 1, ease: "expo.inOut" }, 0)
      //tl.set(overlay, { height: 0, opacity: 0, duration: 0 })
    }
    return tl
  }

  function pageEntryAnim(current, next) {
    const tl = gsap.timeline()
    if (current.container.dataset.barbaNamespace === "case") pageHomeEntry(tl)
    if (current.container.dataset.barbaNamespace === "home") pageProjectEntry(tl)
    enableScroll()
    addEvents()
    //addNavEvents()
    return tl
  }


  // BARBA JS PART
  // =============
  
  barba.hooks.beforeOnce((data) => {
    barbaNs = document.getElementById("intro").dataset.barbaNamespace
    nextProjectHoverAnim(barbaNs)
    if(!isMobile() && barbaNs === 'home') createCursor()
  })

  // barba.hooks.before((data) => { if (data.current.namespace === "case" && !hasTransitionRunOnce) console.log('run fade') })

  barba.hooks.after((data) => {
    if (data.current.namespace === "case") window.scrollTo(0, currentHomeScrollPos)
    if (data.current.namespace === "home") window.scrollTo(0, 0)
    //if(data.next.url.path === "/") createCursor()
  })
  
  barba.hooks.afterEnter((data) => {
    gsapHeroAnimations()
    if(data.next.namespace === 'case') nextProjectHoverAnim(namespace = data.next.namespace)

    handleVideoPlayback()
    const vids = document.querySelectorAll("video")
    vids.forEach(vid => { 
      var playPromise = vid.play()
      if (playPromise !== undefined) { 
        playPromise.then(_ => {}).catch(error => {})
      }
    })
  })

  // scroll to the top of the page
  barba.hooks.enter(() => {
    window.scrollTo(0, 0)
    cleanGSAP()
    gsapAnimations()

    if(!isMobile()) lenis.stop()
    disableScroll()
    setTimeout(() => { if(!isMobile()) smoothScroll() }, 600)
  })

  barba.init({
    transitions: [
      // this one is just to make use of the barba.hooks.beforeOnce etc.
      {
        once() { /*console.log('this will be ignored')*/ },
        beforeOnce(data) {
          // Add the things in here that should run on first browser load
          // This includes the window load event listener function calls
        },
        afterOnce() { /*console.log('shows up AFTER once transition')*/ }
      },
      {
        name: 'seamless',
        async leave() {
          if (!isMobile()) {
            cursor.off()
            cursor.removeEventListeners()
          }
          await pageLeaveAnim()
        },
        enter({ current, next }) { pageEntryAnim(current, next) }
      },

      {
        name: 'fade',
        from: {
          custom: ({ trigger }) => {
            return startFromCasePage
          },
        },
        async leave() {
          if(!isMobile()) lenis.stop()
          disableScroll()
          await gsap.to(document.body, { opacity: 0, duration: 0.6 })
        },
        enter() {
          startFromCasePage = false
          doSeamless = true
          addEvents()
          if(!isMobile()) createCursor()
          gsap.to(document.body, { opacity: 1, duration: 0.6 })

          lenis?.destroy()
          enableScroll()
          setTimeout(() => { if(!isMobile()) smoothScroll() }, 1500)
        },
      }
    ]
  })
}

// only called for the first time when site is loaded, no matter the start page.
window.addEventListener('load', init)

</script>
